plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'

	//apply Asciidoctor plugin
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.codestates'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	asciidoctorExtensions // Declare the asciidoctorExt configuration for dependencies that extend Asciidoctor.
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

	testAnnotationProcessor 'org.projectlombok:lombok'
	//Add a dependency on spring-restdocs-asciidoctor in the asciidoctorExt configuration.
	//This will automatically configure the snippets attribute for use in your .adoc files
	//to point to build/generated-snippets. It will also allow you to use the operation
	//block macro.
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	//Add a dependency on spring-restdocs-mockmvc in the testImplementation configuration.
	//If you want to use WebTestClient or REST Assured rather than MockMvc, add a dependency
	//on spring-restdocs-webtestclient or spring-restdocs-restassured respectively instead.
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

//Configure a property to define the output location for generated snippets.
ext {
	snippetsDir = file('build/generated-snippets')
}

//Configure the test task to add the snippets directory as an output.
test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor { // asciidoctor setup
	dependsOn test // apply after test setup
	configurations 'asciidoctorExtensions' // apply above configuration
	inputs.dir snippetsDir // snippetsDir setup

	//if no source. change adoc files to html
	// change specific source of adoc to HTML
	sources{
		include("**/index.adoc", "**/common/*.adoc")
	}

	// in case, bring another adoc file to include, baseDir setup.
	baseDirFollowsSourceFile()
}

//empty folder
asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

//copy html files after asccidoctor task.
task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

//setup build task
build {
	dependsOn copyDocument
}

bootJar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
